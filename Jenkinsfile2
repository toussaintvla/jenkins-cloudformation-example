// Declarative Pipeline
pipeline {
  agent {
    kubernetes {
      yamlFile 'templates/customk8sPodTemplate.yaml'
    }
  }

  environment {
    credentialsId = 'awsCredentials'
    tfvars = 'sample.tfvars'
  }
  
  stages {
    stage("check identity") {
      steps {
        ansiColor('xterm'){
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          credentialsId: "${credentialsId}",
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) 
          {
            container('custom-image') {
              sh 'aws sts get-caller-identity'
            }
          }
        }
      }
    }
    stage("terraform init") {
      steps {
        ansiColor('xterm'){
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          credentialsId: "${credentialsId}",
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) 
          {
            container('custom-image') {
              sh 'terraform init'
            }
          }
        }
      }
    }
    stage("terraform plan") {
      steps {
        ansiColor('xterm'){
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          credentialsId: "${credentialsId}",
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) 
          {
            container('custom-image') {
              sh 'terraform plan -var-file=${tfvars}'
            }
          }
        }
      }
    }
    stage("APPLY Approval") {
      steps {
        script {
          def userInput = input(
            id: 'confirm', 
            message: 'Apply Terraform?'
          )
        }
      }
    }
    stage("terraform apply") {
      steps {
        ansiColor('xterm'){
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          credentialsId: "${credentialsId}",
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) 
          {
            container('custom-image') {
              sh 'terraform apply -var-file=${tfvars} -auto-approve' 
            }
          }
        }
      }
    }
    stage("terraform show") {
      steps {
        ansiColor('xterm'){
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          credentialsId: "${credentialsId}",
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) 
          {
            container('custom-image') {
              sh 'terraform show'
            }
          }
        }
      }
    }
  }
}